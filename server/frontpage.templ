package main

import (
    "strconv"
)

templ compServiceUnit(unit *Unit) {
	{{
	var unitClass string
	var tooltip string
	switch unit.driver.(type) {
	case *ServiceUnit:
		unitClass = "unitservice"
		tooltip = "A standalone service"
	case *GroupUnit:
		unitClass = "unitgroup"
		tooltip = "Many subpart services grouped together"
	}

	var attrs templ.Attributes
	if len(unit.Styles) > 0 {
		attrs = templ.Attributes{"style": unit.Styles}
	}
	}}

	<div class={ "unit", unitClass } { attrs... }>
	<p class="unit-name" title={ tooltip }>{ unit.Name }</p>
	switch unit.driver.status() {
	case Stopped:
		<span class="marker marker-stopped">Stopped</span>
		<form class="unit-action" method="post" action="/api/start-unit">
			<input type="hidden" name="unit" value={ unit.Name }>
			<input type="submit" value="Start">
		</form>
	case Stopping:
		<span class="marker marker-stopping">Stopping</span>
		if unit.driver.forceStopAllowed() {
			<form class="unit-action" method="post" action="/api/stop-unit">
				<input type="hidden" name="unit" value={ unit.Name }>
				<input type="hidden" name="force" value="true">
				<input type="submit" value="Force stop">
			</form>
		}
	case Running:
		<span class="marker marker-running">Running</span>
		<form class="unit-action" method="post" action="/api/stop-unit">
			<input type="hidden" name="unit" value={ unit.Name }>
			<input type="submit" value="Stop">
		</form>
	}
	switch unit.driver.(type) {
	case *GroupUnit:
		{{
		d := unit.driver.(*GroupUnit)
		n := d.numReqsRunning()
		outOf := len(d.requirements)
		}}
		<span class="c-space-around">subparts: { strconv.Itoa(n) }/{ strconv.Itoa(outOf) }</span>
	}
	// Description is directly configurable as arbitary HTML tags, so we use <div> here
	<div class="unit-desc">@templ.Raw(unit.Description)</div>
	</div>
}

templ compFrontpage(sys *Config) {
	<!DOCTYPE html>
	<html>
	<head>
		<title>tmaxhoc</title>
		<link rel="stylesheet" href="/static/css/main.css" />
		<script src="/static/js/main.js"></script>
	</head>
	<body>
		<div id="unitsContainer">
		for _, unit := range sys.Units {
			// Seems like templ doesn't support continue
			if !unit.Hidden {
				@compServiceUnit(unit)
			}
		}
		</div>
	</body>
	</html>
}
